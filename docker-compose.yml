services:
  fastapi_server_tmpl:
    image: cazlo/fastapi-async-task-workflow:latest
    restart: always
    volumes:
      - ./backend/app:/code
    expose:
      - 8000
    env_file: ".env"
    profiles:
      - template
    depends_on:
      database:
        condition: service_healthy
      db_migrator:
        condition: service_completed_successfully
    networks:
      - app

  fastapi_server_prd:
    container_name: fastapi_server
    extends:
      service: fastapi_server_tmpl
    profiles:
      - prod
    build:
      context: ./backend
      target: runtime
    command: "sh -c 'python app/initial_data.py && gunicorn -w 3 -k uvicorn.workers.UvicornWorker app.main:app  --bind 0.0.0.0:8000 --preload --log-level=debug --timeout 120'"
    networks:
      app:
        aliases:
          - fastapi_server

  fastapi_server:
    extends:
      service: fastapi_server_tmpl
    container_name: fastapi_server_dev
    build:
      context: ./backend
      target: test
    environment:
      MODE: testing
    profiles:
      - dev
    command: "sh -c 'uvicorn app.main:app --reload --workers 3 --host 0.0.0.0 --port 8000'"
    networks:
      app:
        aliases:
          - fastapi_server

  db_migrator:
    container_name: db_migrator
    image: cazlo/fastapi-async-task-workflow:latest
    build: ./backend
    profiles:
      - dev
      - prod
    env_file: ".env"
    volumes:
      - ./backend/app:/code
    depends_on:
      database:
        condition: service_healthy
    command: "sh -c 'alembic upgrade head'"
    networks:
      - app

  database:
     image: docker.io/postgres:17
     restart: always
     container_name: database
     env_file: ".env"
     user: root
     profiles:
       - dev
       - prod
     volumes:
       - db_docker:/var/lib/postgresql/data
       - ./create-dbs.sql:/docker-entrypoint-initdb.d/create-dbs.sql
     ports:
       - 5454:5432
     expose:
       - 5432
     environment:
       - POSTGRES_USERNAME=${DATABASE_USER}
       - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
       - POSTGRES_DATABASE=${DATABASE_NAME}
     healthcheck:
       test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
       interval: 2s
       timeout: 5s
       retries: 10
       start_period: 10s
     networks:
       - app
#  database:
#    image: bitnami/postgresql # todo version lock, use healthcheck
#    restart: always
#    container_name: database
#    env_file: ".env"
#    user: root
#    volumes:
#      - db_docker:/bitnami/postgresql
#      - ./create-dbs.sql:/docker-entrypoint-initdb.d/create-dbs.sql
#    ports:
#      - 5454:5432 # Remove this on production
#    expose:
#      - 5432
#    environment:
#      - POSTGRESQL_USERNAME=${DATABASE_USER}
#      - POSTGRESQL_PASSWORD=${DATABASE_PASSWORD}
#      - POSTGRESQL_DATABASE=${DATABASE_NAME}


  redis_server:
    image: docker.io/valkey/valkey:8.1-alpine3.21
    container_name: redis_server
    restart: always
    profiles:
      - dev
      - prod
    expose:
      - 6379
    env_file: .env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - app
  
  rabbitmq:
    image: docker.io/rabbitmq:3.13-management
    container_name: rabbitmq
    restart: always
    profiles:
      - dev
      - prod
    expose:
      - 5672
      - 15672
    ports:
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app

  celery_worker:
    container_name: celery_worker
    restart: always
    # platform: linux/arm64/v8
    image: cazlo/fastapi-async-task-workflow:latest
    profiles:
#      - dev #excluded from dev to facilitate gathering test coverage of tasks
      - prod
    build:
      context: ./backend      
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    command: "watchfiles 'celery -A app.core.celery worker -l info -E --statedb=/var/run/worker.state' "
    volumes:
      - ./backend/app:/code
      # - "${EB_LOG_BASE_DIR}/php-app:/var/log/celery"
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file: .env
    networks:
      - app
  
  celery_beat:  #Good for crontab and schedule tasks
    container_name: celery_beat
    restart: always
    # platform: linux/arm64/v8
    build:
      context: ./backend
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    command: celery -A app.core.celery beat -l info -l info
    profiles:
      - dev
      - prod
    volumes:
      - ./backend/app:/code
      # - "${EB_LOG_BASE_DIR}/php-app:/var/log/celery-beat"
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file: .env
    networks:
      - app

  minio_server:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    restart: always
    container_name: minio_server
    profiles:
      - dev
      - prod
    volumes:
      - ./minio/data:/data
    expose:
      - 9000
      - 9091
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: http://stash.localhost
    command: "server /data --console-address ':9090'"
    networks:
      - app

  caddy_reverse_proxy:
    container_name: caddy_reverse_proxy
    image: caddy:alpine
    restart: always
    ports:
      - 80:80
      - 443:443
    cap_add:
      - NET_BIND_SERVICE
    networks:
      app:
        aliases:
          - storage.localhost
    environment:
      - EXT_ENDPOINT1=${EXT_ENDPOINT1}
      - LOCAL_1=${LOCAL_1}
      - LOCAL_2=${LOCAL_2}
    profiles:
      - dev
      - prod
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./static:/code/static
      - caddy_data:/data
      - caddy_config:/config

  sonarqube:
    container_name: "sonarqube"
    image: "sonarqube:9.9.2-community"
    volumes:
      - ./sonarqube/extensions:/opt/sonarqube/extensions
      - ./sonarqube/logs:/opt/sonarqube/logs
      - ./sonarqube/data:/opt/sonarqube/data
    profiles:
      - sast
    expose:
      - "9000"
    ports:
      - "9000:9000"
    networks:
      - app

  docs:
      container_name: docs
      image: cazlo/fastapi-async-task-workflow-docs:latest
      build:
        context: ./docs
      profiles:
        - docs
      ports:
        - 8008:8008
      command:
        - mkdocs
        - serve
        - -a
        - 0.0.0.0:8008
    #    command: ["sleep", "3600"]
      volumes:
        - ./docs:/opt/app/docs
        - ./docs/adr_theme:/opt/app/docs/adr_theme
        - ./tmp:/opt/app/tmp

volumes:
  db_docker:
  caddy_data:
  caddy_config:
  rabbitmq_data:

networks:
  app: